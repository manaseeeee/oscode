#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>

// Define mutexes
pthread_mutex_t mutex1 = PTHREAD_MUTEX_INITIALIZER;
pthread_mutex_t mutex2 = PTHREAD_MUTEX_INITIALIZER;

// Function executed by thread 1
void *thread1_function(void *arg) {
    // Acquire mutex1
    pthread_mutex_lock(&mutex1);
    printf("Thread 1 acquired mutex1\n");

    // Sleep for a while to introduce delay
    sleep(1);

    // Attempt to acquire mutex2
    printf("Thread 1 trying to acquire mutex2\n");
    pthread_mutex_lock(&mutex2);
    printf("Thread 1 acquired mutex2\n");

    // Release mutexes
    pthread_mutex_unlock(&mutex2);
    pthread_mutex_unlock(&mutex1);

    pthread_exit(NULL);
}

// Function executed by thread 2
void *thread2_function(void *arg) {
    // Acquire mutex2
    pthread_mutex_lock(&mutex2);
    printf("Thread 2 acquired mutex2\n");

    // Sleep for a while to introduce delay
    sleep(1);

    // Attempt to acquire mutex1
    printf("Thread 2 trying to acquire mutex1\n");
    pthread_mutex_lock(&mutex1);
    printf("Thread 2 acquired mutex1\n");

    // Release mutexes
    pthread_mutex_unlock(&mutex1);
    pthread_mutex_unlock(&mutex2);

    pthread_exit(NULL);
}

int main() {
    pthread_t thread1, thread2;

    // Create thread 1
    if (pthread_create(&thread1, NULL, thread1_function, NULL) != 0) {
        perror("pthread_create");
        exit(EXIT_FAILURE);
    }

    // Create thread 2
    if (pthread_create(&thread2, NULL, thread2_function, NULL) != 0) {
        perror("pthread_create");
        exit(EXIT_FAILURE);
    }

    // Wait for threads to finish
    pthread_join(thread1, NULL);
    pthread_join(thread2, NULL);

    printf("Main thread exiting\n");

    return 0;
}
